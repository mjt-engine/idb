{"version":3,"file":"get.js","sourceRoot":"","sources":["../src/get.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAC5D,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAI5B,MAAM,UAAU,GAAG,CAAI,KAAc,EAAwB,EAAE;IAC7D,MAAM,KAAK,GAAG,KAAoB,CAAC;IACnC,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,GAAG,GAAG,KAAK,EACtB,GAAW,EACX,KAAe,EACf,UAAuC,SAAS,EACxB,EAAE;IAC1B,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;QACvB,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAI,OAAO,CAAC,CAAC;IACtD,IAAI,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC;QAC1B,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;QACvB,MAAM,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;QACrE,MAAM,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,CAAC;QAC5C,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import { Idb } from \"./type/Idb\";\nimport { openIDB } from \"./openIDB\";\nimport { requestToPromise } from \"./requestToPromise\";\nimport { IdbQuery } from \"./type/IdbQuery\";\nimport { isDefined, isUndefined } from \"@mjt-engine/object\";\nimport { put } from \"./put\";\n\ntype Producer<T> = (() => T) | (() => Promise<T>);\n\nconst isProducer = <T>(maybe: unknown): maybe is Producer<T> => {\n  const straw = maybe as Producer<T>;\n  return typeof straw === \"function\";\n};\n\nexport const get = async <T>(\n  idb: Idb<T>,\n  query: IdbQuery,\n  initial: T | Producer<T> | undefined = undefined\n): Promise<T | undefined> => {\n  if (isUndefined(query)) {\n    return undefined;\n  }\n  const store = await openIDB(idb);\n  const request = store.get(query);\n  const valueMaybe = await requestToPromise<T>(request);\n  if (isDefined(valueMaybe)) {\n    return valueMaybe;\n  }\n  if (isDefined(initial)) {\n    const initialValue = isProducer(initial) ? await initial() : initial;\n    await put(idb, String(query), initialValue);\n    return initialValue;\n  }\n  return undefined;\n};\n"]}